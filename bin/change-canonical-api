#!/usr/bin/env python3

import collections
import os
import os.path
import re
import stat
import subprocess
import sys

BATCH_MODE = True

FUNCTION_PATTERNS = [
    '_glptr_{0}',
    'CALL_{0}',
    'GET_{0}',
    'SET_{0}',
    '_gloffset_{0}',
    '__indirect_gl{0}',
    '__gl{0}_size',
    '__applegl_gl{0}',
    ]

C_IDENTIFIER = re.compile('[a-zA-Z_][a-zA-Z0-9_]*')
XML_TOKEN = re.compile('<[^>]+>')
XML_IDENTIFIER = re.compile('[a-zA-Z0-9_:]+')
WHITESPACE = re.compile('[ \t\n]+')
XML_ATTR = re.compile('([a-zA-Z0-9_:]+)([ \t\n]*)(=)([ \t\n]*)(\'[^\']*\'|"[^"]*")')

class File(object):
    def __init__(self, filename):
        with open(filename, 'r', encoding='latin-1') as f:
            self.contents = f.read()

class CFile(File):
    def __init__(self, filename):
        File.__init__(self, filename)
        pos = 0
        tokens = []
        while pos < len(self.contents):
            match = C_IDENTIFIER.search(self.contents, pos)
            if match == None:
                tokens.append(self.contents[pos:])
                break
            tokens.append(self.contents[pos:match.start()])
            tokens.append(self.contents[match.start():match.end()])
            pos = match.end()
        self.parsed = tokens

class TreeNode(object):
    def __init__(self, items):
        self.items = items

    def __str__(self):
        return ''.join(str(item) for item in self.items)

    def __repr__(self):
        return '{0}({1})'.format(type(self).__qualname__,
                                 ', '.join(repr(item) for item in self.items))

class XmlAttr(TreeNode):
    def __init__(self, items):
        TreeNode.__init__(self, items)

def ltrimsplit(s):
    rhs = s.lstrip()
    return s[:(len(s)-len(rhs))],rhs

def rtrimsplit(s):
    lhs = s.rstrip()
    return lhs,s[len(lhs)]

def parse_xml_open_part(s):
    if s[0].isspace():
        return ltrimsplit(s)
    if s[0] in '/>':
        return s, ''
    match = XML_ATTR.match(s)
    if match is None:
        print(repr(s))
    end = match.end()
    return XmlAttr(list(match.groups())), s[match.end():]

def split_xml_open_parts(s):
    yield s[0]
    s = s[1:]
    match = XML_IDENTIFIER.match(s)
    yield match.group()
    s = s[match.end():]
    while s:
        part, s = parse_xml_open_part(s)
        yield part

class XmlOpen(TreeNode):
    def __init__(self, s):
        TreeNode.__init__(self, list(split_xml_open_parts(s)))

class XmlSpecial(TreeNode):
    def __init__(self, s):
        TreeNode.__init__(self, [s])

class Element(TreeNode):
    def __init__(self, items):
        items[0] = XmlOpen(items[0])
        TreeNode.__init__(self, items)

    def tag(self):
        return self.items[0].items[1]

    def find_attr(self, key):
        attr_parts = self.items[0].items
        for i in range(2, len(attr_parts)):
            part = attr_parts[i]
            if isinstance(part, XmlAttr):
                if part.items[0] == key:
                    return i
        return None

    def get_attr(self, key):
        i = self.find_attr(key)
        if i is None:
            return None
        part = self.items[0].items[i]
        assert not '&' in part.items[4]
        return part.items[4][1:-1]

    def get_attr_list(self):
        result = []
        for part in self.items[0].items[2:]:
            if isinstance(part, XmlAttr):
                assert not '&' in part.items[4]
                result.append((part.items[0], part.items[4][1:-1]))
        return result

    def unset_attr(self, key):
        i = self.find_attr(key)
        if i is not None:
            i = i - 1
            j = i + 2
            del self.items[0].items[i:j]

    def set_attr(self, key, value):
        i = self.find_attr(key)
        value_str = '"{0}"'.format(value)
        if i is not None:
            self.items[0].items[i].items[4] = value_str
        else:
            self.items[0].items[-1:-1] = [' ', XmlAttr([key, '', '=', '', value_str])]

def parse_xml(tokens):
    stack = [[list, []]]
    for token in tokens:
        if token.startswith('<?') or token.startswith('<!'):
            stack[-1][1].append(XmlSpecial(token))
        elif not token.startswith('<'):
            stack[-1][1].append(token)
        elif token.endswith('/>'):
            stack[-1][1].append(Element([token]))
        elif token.startswith('</'):
            assert len(stack) > 1
            stack[-1][1].append(token)
            cls, items = stack.pop()
            stack[-1][1].append(cls(items))
        else:
            stack.append([Element, [token]])
    if len(stack) != 1:
        print('{0!r}'.format(stack))
    assert len(stack) == 1
    cls, items = stack[0]
    return cls(items)

class XmlFile(File):
    def __init__(self, filename):
        File.__init__(self, filename)
        pos = 0
        tokens = []
        while pos < len(self.contents):
            start = self.contents.find('<', pos)
            if start == -1:
                tokens.append(self.contents[pos:])
                break
            if self.contents[start:(start + 4)] == '<!--':
                end = self.contents.find('-->', start + 4)
                assert end != -1
                end += 3
            else:
                match = XML_TOKEN.match(self.contents, start)
                assert start == match.start()
                end = match.end()
            tokens.append(self.contents[pos:start])
            tokens.append(self.contents[start:end])
            pos = end
        for token in tokens:
            assert token.find('<') in (-1, 0)
            if token.startswith('<?'):
                assert token.endswith('?>')
            if token.startswith('<!--'):
                assert token.endswith('-->')
            else:
                assert token.find('>') in (-1, len(token) - 1)
            if token.startswith('<'):
                assert token.endswith('>')
            if token.find('>') != -1:
                assert token.startswith('<')
        self.parsed = parse_xml(tokens)

class FileCache(dict):
    def read_file(self, filename):
        base, ext = os.path.splitext(filename)
        ext = ext.lower()
        if ext in ('.cpp', '.hpp', '.cc', '.hh', '.c', '.h'):
            self[filename] = CFile(filename)
        elif ext == '.xml':
            self[filename] = XmlFile(filename)

    def recursive_read(self, filename):
        if os.path.basename(filename) == '.git':
            return
        if os.path.islink(filename):
            pass
        elif os.path.isfile(filename):
            self.read_file(filename)
        elif os.path.isdir(filename):
            for file in os.listdir(filename):
                self.recursive_read(os.path.join(filename, file))

    def write_files(self):
        for filename, model in self.items():
            new_contents = ''.join(str(item) for item in model.parsed)
            if new_contents != model.contents:
                with open(filename, 'w', encoding='latin-1') as f:
                    f.write(new_contents)
                model.contents = new_contents
                print('Wrote {0}'.format(filename))

class Analysis(object):
    def __init__(self, file_cache):
        self.file_cache = file_cache
        self.fn_by_name = {}
        self.fn_by_alias = collections.defaultdict(dict)
        self.fn_by_vectorequiv = collections.defaultdict(dict)
        self.size_by_name = collections.defaultdict(list)
        for key, value in file_cache.items():
            if isinstance(value, XmlFile):
                self.recurse(value.parsed)

    def recurse(self, items):
        for item in items:
            if isinstance(item, Element):
                if item.tag() == 'function':
                    fname = item.get_attr('name')
                    assert fname not in self.fn_by_name
                    self.fn_by_name[fname] = item
                    falias = item.get_attr('alias')
                    if falias is None:
                        falias = fname
                    self.fn_by_alias[falias][fname] = item
                    vectorequiv = item.get_attr('vectorequiv')
                    if vectorequiv is not None:
                        self.fn_by_vectorequiv[vectorequiv][fname] = item
                elif item.tag() == 'size':
                    name = item.get_attr('name')
                    self.size_by_name[name].append(item)
                self.recurse(item.items[1:-1])

    def move_params(self, src, dst):
        for key, value in src.get_attr_list():
            if key in ('name', 'type', 'padding'):
                continue
            elif key in ('client_only', 'count', 'counter', 'count_scale',
                         'output', 'img_width', 'img_height', 'img_depth',
                         'img_extent', 'img_xoff', 'img_yoff', 'img_zoff',
                         'img_woff', 'img_format', 'img_type', 'img_target',
                         'img_send_null', 'img_null_flag', 'img_pad_dimensions',
                         'variable_param'):
                src.unset_attr(key)
                dst.set_attr(key, value)
            else:
                raise Exception(key)

    def join_strings(self, items, i):
        if 0 < i < len(items) and isinstance(items[i-1], str) and isinstance(items[i], str):
            combined = items[i-1] + items[i]
            items[i-1:i+1] = [combined]

    def cut_item_lines(self, items, i):
        cut_items = [items[i]]
        del items[i]
        if i < len(items) and isinstance(items[i], str) and items[i].isspace():
            newline_pos = items[i].rfind('\n')
            if newline_pos != -1:
                cut_items.append(items[i][:(newline_pos + 1)])
                items[i] = items[i][(newline_pos + 1):]
                if items[i] == '':
                    del items[i]
        if i > 0 and isinstance(items[i-1], str) and items[i-1].isspace():
            newline_pos = items[i-1].find('\n')
            if newline_pos != -1:
                if newline_pos + 1 != len(items[i-1]):
                    cut_items.insert(0, items[i-1][(newline_pos + 1):])
                    items[i-1] = items[i-1][:(newline_pos + 1)]
                    if items[i-1] == '':
                        del items[i-1]
        self.join_strings(items, i)
        return cut_items

    def insert_lines(self, items, i, paste_items):
        indentation = ''
        if i > 0 and isinstance(items[i-1], str) and items[i-1].isspace():
            newline_pos = items[i-1].rfind('\n')
            if newline_pos + 1 != len(items[i-1]):
                indentation = items[i-1][(newline_pos + 1):]
                items[i-1] = items[i-1][:(newline_pos + 1)]
                if items[i-1] == '':
                    del items[i-1]
                    i -= 1
                items.insert(i, indentation)
        items[i:i] = paste_items
        self.join_strings(items, i + len(paste_items))
        self.join_strings(items, i)

    def move_glx(self, frm, to):
        src_xml = self.fn_by_name[frm]
        dst_xml = self.fn_by_name[to]
        src_params = [item for item in src_xml.items if isinstance(item, Element) and item.tag() == 'param']
        dst_params = [item for item in dst_xml.items if isinstance(item, Element) and item.tag() == 'param']
        assert len(src_params) == len(dst_params)
        for i in range(len(src_params)):
            self.move_params(src_params[i], dst_params[i])
        offset = src_xml.get_attr('offset')
        if offset is not None:
            dst_xml.set_attr('offset', offset)
            src_xml.unset_attr('offset')
        # Move GLX element, if present
        for i in range(len(src_xml.items)):
            if isinstance(src_xml.items[i], Element) and src_xml.items[i].tag() == 'glx':
                cut_items = self.cut_item_lines(src_xml.items, i)
                self.insert_lines(dst_xml.items, len(dst_xml.items) - 1, cut_items)
                break
        #print(str(src_xml))
        #print(str(dst_xml))

    def fix_mesa_name_and_exec(self, frm):
        assert frm in self.fn_by_alias
        for value in self.fn_by_alias[frm].values():
            value.unset_attr('mesa_name')
            if value.get_attr('exec') in ('es', 'loopback', 'check'):
                value.unset_attr('exec')

    def fix_aliases(self, frm, to):
        assert frm != to
        assert frm in self.fn_by_alias
        assert to in self.fn_by_alias[frm]
        for key, value in self.fn_by_alias[frm].items():
            if key == to:
                value.unset_attr('alias')
            else:
                value.set_attr('alias', to)
            #print(value)

    def fix_vectorequivs(self, frm, to):
        if frm not in self.fn_by_vectorequiv:
            return
        for value in self.fn_by_vectorequiv[frm].values():
            assert value.get_attr('vectorequiv') == frm
            value.set_attr('vectorequiv', to)

    def change_c_identifiers(self, changes):
        for filename, model in self.file_cache.items():
            if isinstance(model, CFile):
                for i in range(len(model.parsed)):
                    if model.parsed[i] in changes:
                        model.parsed[i] = changes[model.parsed[i]]

    def fix_sizes(self, frm, to):
        if frm not in self.size_by_name:
            return
        for elem in self.size_by_name[frm]:
            assert elem.get_attr('name') == frm
            elem.set_attr('name', to)

def describe_change(rename):
    junk, old_canonical, new_canonical, old_mesa_name, new_mesa_name = rename
    mesa_change = (old_mesa_name != new_mesa_name)
    alias_change = (old_canonical != new_canonical)
    if mesa_change and alias_change:
        desc = 'Rename {0} => {1} (and change aliasing)'.format(old_mesa_name, new_mesa_name)
    elif mesa_change:
        desc = 'Rename {0} => {1}'.format(old_mesa_name, new_mesa_name)
    else:
        desc = 'Change aliasing for {0}'.format(new_canonical)
    return desc

def describe_changes(renames):
    result = ['Standardize names of OpenGL functions used in Mesa\n\nThis patch ']
    mesa_renames = []
    primary_name_changes = []
    for junk, old_canonical, new_canonical, old_mesa_name, new_mesa_name in renames:
        if old_canonical != new_canonical:
            primary_name_changes.append((old_canonical, new_canonical))
        if old_mesa_name != new_mesa_name:
            mesa_renames.append((old_mesa_name, new_mesa_name))
    if mesa_renames:
        result.append('renames the following mesa function{0}:\n'.format('s' if len(mesa_renames) > 1 else ''))
        for rename in sorted(mesa_renames):
            result.append('  {0} => {1}\n'.format(*rename))
        if primary_name_changes:
            result.append('\nAnd ')
    if primary_name_changes:
        result.append('changes the primary name assignment in the XML as follows:\n')
        for rename in sorted(primary_name_changes):
            result.append('  {0} => {1}\n'.format(*rename))
    return ''.join(result)

def do_batch(renames, file_cache, analysis):
    c_changes = {}
    for rename in renames:
        desc = describe_change(rename)
        print('XML: {0}'.format(desc))
        junk, old_canonical, new_canonical, old_mesa_name, new_mesa_name = rename
        if old_mesa_name != new_mesa_name:
            c_changes[old_mesa_name] = new_mesa_name
            analysis.fix_mesa_name_and_exec(old_canonical)
        if old_canonical != new_canonical:
            analysis.fix_aliases(old_canonical, new_canonical)
            analysis.fix_vectorequivs(old_canonical, new_canonical)
            analysis.move_glx(old_canonical, new_canonical)
            analysis.fix_sizes(old_canonical, new_canonical)
            for pattern in FUNCTION_PATTERNS:
                c_changes[pattern.format(old_canonical)] = pattern.format(new_canonical)
    print('Renaming {0} functions in C/C++ code'.format(len(c_changes)))
    analysis.change_c_identifiers(c_changes)


def main(renames):
    root_dir = '/home/pberry/mesa'

    file_cache = FileCache()
    print('Scanning')
    file_cache.recursive_read(root_dir)
    analysis = Analysis(file_cache)
    if BATCH_MODE:
        do_batch(renames, file_cache, analysis)
        file_cache.write_files()
        #proc = subprocess.Popen(['git', 'commit', '-a', '--file=-'], stdin=subprocess.PIPE, universal_newlines=True)
        #proc.communicate(describe_changes(renames))
        #proc.wait()
        #if proc.returncode != 0:
        #    raise Excepition('Git call failed with return code {0}'.format(proc.returncode))
    else:
        for rename in renames:
            desc = describe_change(rename)
            print('Preparing commit {0!r}'.format(desc))
            do_batch([rename], file_cache, analysis)
            file_cache.write_files()
            print('Committing')
            subprocess.check_call(['git', 'commit', '-a', '-m' + desc])

# From blet.py
renames = [[0, "GetTexGenxvOES", "GetTexGenxvOES", "_check_GetTexGenxvOES", "_mesa_GetTexGenxvOES"], [0, "TexGenxOES", "TexGenxOES", "_check_TexGenxOES", "_mesa_TexGenxOES"], [0, "TexGenxvOES", "TexGenxvOES", "_check_TexGenxvOES", "_mesa_TexGenxvOES"], [1, "AlphaFuncxOES", "AlphaFuncx", "_es_AlphaFuncx", "_mesa_AlphaFuncx"], [1, "ClearColorxOES", "ClearColorx", "_es_ClearColorx", "_mesa_ClearColorx"], [1, "ClearDepthxOES", "ClearDepthx", "_es_ClearDepthx", "_mesa_ClearDepthx"], [1, "ClipPlanefOES", "ClipPlanef", "_es_ClipPlanef", "_mesa_ClipPlanef"], [1, "ClipPlanexOES", "ClipPlanex", "_es_ClipPlanex", "_mesa_ClipPlanex"], [1, "Color4xOES", "Color4x", "_es_Color4x", "_mesa_Color4x"], [1, "DepthRangexOES", "DepthRangex", "_es_DepthRangex", "_mesa_DepthRangex"], [1, "DrawTexxOES", "DrawTexxOES", "_es_DrawTexxOES", "_mesa_DrawTexxOES"], [1, "DrawTexxvOES", "DrawTexxvOES", "_es_DrawTexxvOES", "_mesa_DrawTexxvOES"], [1, "FogxOES", "Fogx", "_es_Fogx", "_mesa_Fogx"], [1, "FogxvOES", "Fogxv", "_es_Fogxv", "_mesa_Fogxv"], [1, "FrustumfOES", "Frustumf", "_es_Frustumf", "_mesa_Frustumf"], [1, "FrustumxOES", "Frustumx", "_es_Frustumx", "_mesa_Frustumx"], [1, "GetClipPlanefOES", "GetClipPlanef", "_es_GetClipPlanef", "_mesa_GetClipPlanef"], [1, "GetClipPlanexOES", "GetClipPlanex", "_es_GetClipPlanex", "_mesa_GetClipPlanex"], [1, "GetLightxvOES", "GetLightxv", "_es_GetLightxv", "_mesa_GetLightxv"], [1, "GetMaterialxvOES", "GetMaterialxv", "_es_GetMaterialxv", "_mesa_GetMaterialxv"], [1, "GetTexEnvxvOES", "GetTexEnvxv", "_es_GetTexEnvxv", "_mesa_GetTexEnvxv"], [1, "GetTexParameterxvOES", "GetTexParameterxv", "_es_GetTexParameterxv", "_mesa_GetTexParameterxv"], [1, "LightModelxOES", "LightModelx", "_es_LightModelx", "_mesa_LightModelx"], [1, "LightModelxvOES", "LightModelxv", "_es_LightModelxv", "_mesa_LightModelxv"], [1, "LightxOES", "Lightx", "_es_Lightx", "_mesa_Lightx"], [1, "LightxvOES", "Lightxv", "_es_Lightxv", "_mesa_Lightxv"], [1, "LineWidthxOES", "LineWidthx", "_es_LineWidthx", "_mesa_LineWidthx"], [1, "LoadMatrixxOES", "LoadMatrixx", "_es_LoadMatrixx", "_mesa_LoadMatrixx"], [1, "MaterialxOES", "Materialx", "_es_Materialx", "_mesa_Materialx"], [1, "MaterialxvOES", "Materialxv", "_es_Materialxv", "_mesa_Materialxv"], [1, "MultMatrixxOES", "MultMatrixx", "_es_MultMatrixx", "_mesa_MultMatrixx"], [1, "MultiTexCoord4xOES", "MultiTexCoord4x", "_es_MultiTexCoord4x", "_mesa_MultiTexCoord4x"], [1, "Normal3xOES", "Normal3x", "_es_Normal3x", "_mesa_Normal3x"], [1, "OrthofOES", "Orthof", "_es_Orthof", "_mesa_Orthof"], [1, "OrthoxOES", "Orthox", "_es_Orthox", "_mesa_Orthox"], [1, "PointParameterxOES", "PointParameterx", "_es_PointParameterx", "_mesa_PointParameterx"], [1, "PointParameterxvOES", "PointParameterxv", "_es_PointParameterxv", "_mesa_PointParameterxv"], [1, "PointSizexOES", "PointSizex", "_es_PointSizex", "_mesa_PointSizex"], [1, "PolygonOffsetxOES", "PolygonOffsetx", "_es_PolygonOffsetx", "_mesa_PolygonOffsetx"], [1, "QueryMatrixxOES", "QueryMatrixxOES", "_es_QueryMatrixxOES", "_mesa_QueryMatrixxOES"], [1, "RotatexOES", "Rotatex", "_es_Rotatex", "_mesa_Rotatex"], [1, "SampleCoveragexOES", "SampleCoveragex", "_es_SampleCoveragex", "_mesa_SampleCoveragex"], [1, "ScalexOES", "Scalex", "_es_Scalex", "_mesa_Scalex"], [1, "TexEnvxOES", "TexEnvx", "_es_TexEnvx", "_mesa_TexEnvx"], [1, "TexEnvxvOES", "TexEnvxv", "_es_TexEnvxv", "_mesa_TexEnvxv"], [1, "TexParameterxOES", "TexParameterx", "_es_TexParameterx", "_mesa_TexParameterx"], [1, "TexParameterxvOES", "TexParameterxv", "_es_TexParameterxv", "_mesa_TexParameterxv"], [1, "TranslatexOES", "Translatex", "_es_Translatex", "_mesa_Translatex"], [2, "Color3b", "Color3b", "loopback_Color3b_f", "_mesa_Color3b"], [2, "Color3bv", "Color3bv", "loopback_Color3bv_f", "_mesa_Color3bv"], [2, "Color3d", "Color3d", "loopback_Color3d_f", "_mesa_Color3d"], [2, "Color3dv", "Color3dv", "loopback_Color3dv_f", "_mesa_Color3dv"], [2, "Color3i", "Color3i", "loopback_Color3i_f", "_mesa_Color3i"], [2, "Color3iv", "Color3iv", "loopback_Color3iv_f", "_mesa_Color3iv"], [2, "Color3s", "Color3s", "loopback_Color3s_f", "_mesa_Color3s"], [2, "Color3sv", "Color3sv", "loopback_Color3sv_f", "_mesa_Color3sv"], [2, "Color3ub", "Color3ub", "loopback_Color3ub_f", "_mesa_Color3ub"], [2, "Color3ubv", "Color3ubv", "loopback_Color3ubv_f", "_mesa_Color3ubv"], [2, "Color3ui", "Color3ui", "loopback_Color3ui_f", "_mesa_Color3ui"], [2, "Color3uiv", "Color3uiv", "loopback_Color3uiv_f", "_mesa_Color3uiv"], [2, "Color3us", "Color3us", "loopback_Color3us_f", "_mesa_Color3us"], [2, "Color3usv", "Color3usv", "loopback_Color3usv_f", "_mesa_Color3usv"], [2, "Color4b", "Color4b", "loopback_Color4b_f", "_mesa_Color4b"], [2, "Color4bv", "Color4bv", "loopback_Color4bv_f", "_mesa_Color4bv"], [2, "Color4d", "Color4d", "loopback_Color4d_f", "_mesa_Color4d"], [2, "Color4dv", "Color4dv", "loopback_Color4dv_f", "_mesa_Color4dv"], [2, "Color4i", "Color4i", "loopback_Color4i_f", "_mesa_Color4i"], [2, "Color4iv", "Color4iv", "loopback_Color4iv_f", "_mesa_Color4iv"], [2, "Color4s", "Color4s", "loopback_Color4s_f", "_mesa_Color4s"], [2, "Color4sv", "Color4sv", "loopback_Color4sv_f", "_mesa_Color4sv"], [2, "Color4ub", "Color4ub", "loopback_Color4ub_f", "_mesa_Color4ub"], [2, "Color4ubv", "Color4ubv", "loopback_Color4ubv_f", "_mesa_Color4ubv"], [2, "Color4ui", "Color4ui", "loopback_Color4ui_f", "_mesa_Color4ui"], [2, "Color4uiv", "Color4uiv", "loopback_Color4uiv_f", "_mesa_Color4uiv"], [2, "Color4us", "Color4us", "loopback_Color4us_f", "_mesa_Color4us"], [2, "Color4usv", "Color4usv", "loopback_Color4usv_f", "_mesa_Color4usv"], [2, "EdgeFlagv", "EdgeFlagv", "loopback_EdgeFlagv", "_mesa_EdgeFlagv"], [2, "EvalCoord1d", "EvalCoord1d", "loopback_EvalCoord1d", "_mesa_EvalCoord1d"], [2, "EvalCoord1dv", "EvalCoord1dv", "loopback_EvalCoord1dv", "_mesa_EvalCoord1dv"], [2, "EvalCoord1fv", "EvalCoord1fv", "loopback_EvalCoord1fv", "_mesa_EvalCoord1fv"], [2, "EvalCoord2d", "EvalCoord2d", "loopback_EvalCoord2d", "_mesa_EvalCoord2d"], [2, "EvalCoord2dv", "EvalCoord2dv", "loopback_EvalCoord2dv", "_mesa_EvalCoord2dv"], [2, "EvalCoord2fv", "EvalCoord2fv", "loopback_EvalCoord2fv", "_mesa_EvalCoord2fv"], [2, "FogCoorddEXT", "FogCoordd", "loopback_FogCoorddEXT", "_mesa_FogCoordd"], [2, "FogCoorddvEXT", "FogCoorddv", "loopback_FogCoorddvEXT", "_mesa_FogCoorddv"], [2, "Indexd", "Indexd", "loopback_Indexd", "_mesa_Indexd"], [2, "Indexdv", "Indexdv", "loopback_Indexdv", "_mesa_Indexdv"], [2, "Indexi", "Indexi", "loopback_Indexi", "_mesa_Indexi"], [2, "Indexiv", "Indexiv", "loopback_Indexiv", "_mesa_Indexiv"], [2, "Indexs", "Indexs", "loopback_Indexs", "_mesa_Indexs"], [2, "Indexsv", "Indexsv", "loopback_Indexsv", "_mesa_Indexsv"], [2, "Indexub", "Indexub", "loopback_Indexub", "_mesa_Indexub"], [2, "Indexubv", "Indexubv", "loopback_Indexubv", "_mesa_Indexubv"], [2, "Materialf", "Materialf", "loopback_Materialf", "_mesa_Materialf"], [2, "Materiali", "Materiali", "loopback_Materiali", "_mesa_Materiali"], [2, "Materialiv", "Materialiv", "loopback_Materialiv", "_mesa_Materialiv"], [2, "MultiTexCoord1dARB", "MultiTexCoord1d", "loopback_MultiTexCoord1dARB", "_mesa_MultiTexCoord1d"], [2, "MultiTexCoord1dvARB", "MultiTexCoord1dv", "loopback_MultiTexCoord1dvARB", "_mesa_MultiTexCoord1dv"], [2, "MultiTexCoord1iARB", "MultiTexCoord1i", "loopback_MultiTexCoord1iARB", "_mesa_MultiTexCoord1i"], [2, "MultiTexCoord1ivARB", "MultiTexCoord1iv", "loopback_MultiTexCoord1ivARB", "_mesa_MultiTexCoord1iv"], [2, "MultiTexCoord1sARB", "MultiTexCoord1s", "loopback_MultiTexCoord1sARB", "_mesa_MultiTexCoord1s"], [2, "MultiTexCoord1svARB", "MultiTexCoord1sv", "loopback_MultiTexCoord1svARB", "_mesa_MultiTexCoord1sv"], [2, "MultiTexCoord2dARB", "MultiTexCoord2d", "loopback_MultiTexCoord2dARB", "_mesa_MultiTexCoord2d"], [2, "MultiTexCoord2dvARB", "MultiTexCoord2dv", "loopback_MultiTexCoord2dvARB", "_mesa_MultiTexCoord2dv"], [2, "MultiTexCoord2iARB", "MultiTexCoord2i", "loopback_MultiTexCoord2iARB", "_mesa_MultiTexCoord2i"], [2, "MultiTexCoord2ivARB", "MultiTexCoord2iv", "loopback_MultiTexCoord2ivARB", "_mesa_MultiTexCoord2iv"], [2, "MultiTexCoord2sARB", "MultiTexCoord2s", "loopback_MultiTexCoord2sARB", "_mesa_MultiTexCoord2s"], [2, "MultiTexCoord2svARB", "MultiTexCoord2sv", "loopback_MultiTexCoord2svARB", "_mesa_MultiTexCoord2sv"], [2, "MultiTexCoord3dARB", "MultiTexCoord3d", "loopback_MultiTexCoord3dARB", "_mesa_MultiTexCoord3d"], [2, "MultiTexCoord3dvARB", "MultiTexCoord3dv", "loopback_MultiTexCoord3dvARB", "_mesa_MultiTexCoord3dv"], [2, "MultiTexCoord3iARB", "MultiTexCoord3i", "loopback_MultiTexCoord3iARB", "_mesa_MultiTexCoord3i"], [2, "MultiTexCoord3ivARB", "MultiTexCoord3iv", "loopback_MultiTexCoord3ivARB", "_mesa_MultiTexCoord3iv"], [2, "MultiTexCoord3sARB", "MultiTexCoord3s", "loopback_MultiTexCoord3sARB", "_mesa_MultiTexCoord3s"], [2, "MultiTexCoord3svARB", "MultiTexCoord3sv", "loopback_MultiTexCoord3svARB", "_mesa_MultiTexCoord3sv"], [2, "MultiTexCoord4dARB", "MultiTexCoord4d", "loopback_MultiTexCoord4dARB", "_mesa_MultiTexCoord4d"], [2, "MultiTexCoord4dvARB", "MultiTexCoord4dv", "loopback_MultiTexCoord4dvARB", "_mesa_MultiTexCoord4dv"], [2, "MultiTexCoord4iARB", "MultiTexCoord4i", "loopback_MultiTexCoord4iARB", "_mesa_MultiTexCoord4i"], [2, "MultiTexCoord4ivARB", "MultiTexCoord4iv", "loopback_MultiTexCoord4ivARB", "_mesa_MultiTexCoord4iv"], [2, "MultiTexCoord4sARB", "MultiTexCoord4s", "loopback_MultiTexCoord4sARB", "_mesa_MultiTexCoord4s"], [2, "MultiTexCoord4svARB", "MultiTexCoord4sv", "loopback_MultiTexCoord4svARB", "_mesa_MultiTexCoord4sv"], [2, "Normal3b", "Normal3b", "loopback_Normal3b", "_mesa_Normal3b"], [2, "Normal3bv", "Normal3bv", "loopback_Normal3bv", "_mesa_Normal3bv"], [2, "Normal3d", "Normal3d", "loopback_Normal3d", "_mesa_Normal3d"], [2, "Normal3dv", "Normal3dv", "loopback_Normal3dv", "_mesa_Normal3dv"], [2, "Normal3i", "Normal3i", "loopback_Normal3i", "_mesa_Normal3i"], [2, "Normal3iv", "Normal3iv", "loopback_Normal3iv", "_mesa_Normal3iv"], [2, "Normal3s", "Normal3s", "loopback_Normal3s", "_mesa_Normal3s"], [2, "Normal3sv", "Normal3sv", "loopback_Normal3sv", "_mesa_Normal3sv"], [2, "Rectd", "Rectd", "loopback_Rectd", "_mesa_Rectd"], [2, "Rectdv", "Rectdv", "loopback_Rectdv", "_mesa_Rectdv"], [2, "Rectfv", "Rectfv", "loopback_Rectfv", "_mesa_Rectfv"], [2, "Recti", "Recti", "loopback_Recti", "_mesa_Recti"], [2, "Rectiv", "Rectiv", "loopback_Rectiv", "_mesa_Rectiv"], [2, "Rects", "Rects", "loopback_Rects", "_mesa_Rects"], [2, "Rectsv", "Rectsv", "loopback_Rectsv", "_mesa_Rectsv"], [2, "SecondaryColor3bEXT", "SecondaryColor3b", "loopback_SecondaryColor3bEXT_f", "_mesa_SecondaryColor3b"], [2, "SecondaryColor3bvEXT", "SecondaryColor3bv", "loopback_SecondaryColor3bvEXT_f", "_mesa_SecondaryColor3bv"], [2, "SecondaryColor3dEXT", "SecondaryColor3d", "loopback_SecondaryColor3dEXT_f", "_mesa_SecondaryColor3d"], [2, "SecondaryColor3dvEXT", "SecondaryColor3dv", "loopback_SecondaryColor3dvEXT_f", "_mesa_SecondaryColor3dv"], [2, "SecondaryColor3iEXT", "SecondaryColor3i", "loopback_SecondaryColor3iEXT_f", "_mesa_SecondaryColor3i"], [2, "SecondaryColor3ivEXT", "SecondaryColor3iv", "loopback_SecondaryColor3ivEXT_f", "_mesa_SecondaryColor3iv"], [2, "SecondaryColor3sEXT", "SecondaryColor3s", "loopback_SecondaryColor3sEXT_f", "_mesa_SecondaryColor3s"], [2, "SecondaryColor3svEXT", "SecondaryColor3sv", "loopback_SecondaryColor3svEXT_f", "_mesa_SecondaryColor3sv"], [2, "SecondaryColor3ubEXT", "SecondaryColor3ub", "loopback_SecondaryColor3ubEXT_f", "_mesa_SecondaryColor3ub"], [2, "SecondaryColor3ubvEXT", "SecondaryColor3ubv", "loopback_SecondaryColor3ubvEXT_f", "_mesa_SecondaryColor3ubv"], [2, "SecondaryColor3uiEXT", "SecondaryColor3ui", "loopback_SecondaryColor3uiEXT_f", "_mesa_SecondaryColor3ui"], [2, "SecondaryColor3uivEXT", "SecondaryColor3uiv", "loopback_SecondaryColor3uivEXT_f", "_mesa_SecondaryColor3uiv"], [2, "SecondaryColor3usEXT", "SecondaryColor3us", "loopback_SecondaryColor3usEXT_f", "_mesa_SecondaryColor3us"], [2, "SecondaryColor3usvEXT", "SecondaryColor3usv", "loopback_SecondaryColor3usvEXT_f", "_mesa_SecondaryColor3usv"], [2, "TexCoord1d", "TexCoord1d", "loopback_TexCoord1d", "_mesa_TexCoord1d"], [2, "TexCoord1dv", "TexCoord1dv", "loopback_TexCoord1dv", "_mesa_TexCoord1dv"], [2, "TexCoord1i", "TexCoord1i", "loopback_TexCoord1i", "_mesa_TexCoord1i"], [2, "TexCoord1iv", "TexCoord1iv", "loopback_TexCoord1iv", "_mesa_TexCoord1iv"], [2, "TexCoord1s", "TexCoord1s", "loopback_TexCoord1s", "_mesa_TexCoord1s"], [2, "TexCoord1sv", "TexCoord1sv", "loopback_TexCoord1sv", "_mesa_TexCoord1sv"], [2, "TexCoord2d", "TexCoord2d", "loopback_TexCoord2d", "_mesa_TexCoord2d"], [2, "TexCoord2dv", "TexCoord2dv", "loopback_TexCoord2dv", "_mesa_TexCoord2dv"], [2, "TexCoord2i", "TexCoord2i", "loopback_TexCoord2i", "_mesa_TexCoord2i"], [2, "TexCoord2iv", "TexCoord2iv", "loopback_TexCoord2iv", "_mesa_TexCoord2iv"], [2, "TexCoord2s", "TexCoord2s", "loopback_TexCoord2s", "_mesa_TexCoord2s"], [2, "TexCoord2sv", "TexCoord2sv", "loopback_TexCoord2sv", "_mesa_TexCoord2sv"], [2, "TexCoord3d", "TexCoord3d", "loopback_TexCoord3d", "_mesa_TexCoord3d"], [2, "TexCoord3dv", "TexCoord3dv", "loopback_TexCoord3dv", "_mesa_TexCoord3dv"], [2, "TexCoord3i", "TexCoord3i", "loopback_TexCoord3i", "_mesa_TexCoord3i"], [2, "TexCoord3iv", "TexCoord3iv", "loopback_TexCoord3iv", "_mesa_TexCoord3iv"], [2, "TexCoord3s", "TexCoord3s", "loopback_TexCoord3s", "_mesa_TexCoord3s"], [2, "TexCoord3sv", "TexCoord3sv", "loopback_TexCoord3sv", "_mesa_TexCoord3sv"], [2, "TexCoord4d", "TexCoord4d", "loopback_TexCoord4d", "_mesa_TexCoord4d"], [2, "TexCoord4dv", "TexCoord4dv", "loopback_TexCoord4dv", "_mesa_TexCoord4dv"], [2, "TexCoord4i", "TexCoord4i", "loopback_TexCoord4i", "_mesa_TexCoord4i"], [2, "TexCoord4iv", "TexCoord4iv", "loopback_TexCoord4iv", "_mesa_TexCoord4iv"], [2, "TexCoord4s", "TexCoord4s", "loopback_TexCoord4s", "_mesa_TexCoord4s"], [2, "TexCoord4sv", "TexCoord4sv", "loopback_TexCoord4sv", "_mesa_TexCoord4sv"], [2, "Vertex2d", "Vertex2d", "loopback_Vertex2d", "_mesa_Vertex2d"], [2, "Vertex2dv", "Vertex2dv", "loopback_Vertex2dv", "_mesa_Vertex2dv"], [2, "Vertex2i", "Vertex2i", "loopback_Vertex2i", "_mesa_Vertex2i"], [2, "Vertex2iv", "Vertex2iv", "loopback_Vertex2iv", "_mesa_Vertex2iv"], [2, "Vertex2s", "Vertex2s", "loopback_Vertex2s", "_mesa_Vertex2s"], [2, "Vertex2sv", "Vertex2sv", "loopback_Vertex2sv", "_mesa_Vertex2sv"], [2, "Vertex3d", "Vertex3d", "loopback_Vertex3d", "_mesa_Vertex3d"], [2, "Vertex3dv", "Vertex3dv", "loopback_Vertex3dv", "_mesa_Vertex3dv"], [2, "Vertex3i", "Vertex3i", "loopback_Vertex3i", "_mesa_Vertex3i"], [2, "Vertex3iv", "Vertex3iv", "loopback_Vertex3iv", "_mesa_Vertex3iv"], [2, "Vertex3s", "Vertex3s", "loopback_Vertex3s", "_mesa_Vertex3s"], [2, "Vertex3sv", "Vertex3sv", "loopback_Vertex3sv", "_mesa_Vertex3sv"], [2, "Vertex4d", "Vertex4d", "loopback_Vertex4d", "_mesa_Vertex4d"], [2, "Vertex4dv", "Vertex4dv", "loopback_Vertex4dv", "_mesa_Vertex4dv"], [2, "Vertex4i", "Vertex4i", "loopback_Vertex4i", "_mesa_Vertex4i"], [2, "Vertex4iv", "Vertex4iv", "loopback_Vertex4iv", "_mesa_Vertex4iv"], [2, "Vertex4s", "Vertex4s", "loopback_Vertex4s", "_mesa_Vertex4s"], [2, "Vertex4sv", "Vertex4sv", "loopback_Vertex4sv", "_mesa_Vertex4sv"], [2, "VertexAttrib1dARB", "VertexAttrib1d", "loopback_VertexAttrib1dARB", "_mesa_VertexAttrib1d"], [2, "VertexAttrib1dNV", "VertexAttrib1dNV", "loopback_VertexAttrib1dNV", "_mesa_VertexAttrib1dNV"], [2, "VertexAttrib1dvARB", "VertexAttrib1dv", "loopback_VertexAttrib1dvARB", "_mesa_VertexAttrib1dv"], [2, "VertexAttrib1dvNV", "VertexAttrib1dvNV", "loopback_VertexAttrib1dvNV", "_mesa_VertexAttrib1dvNV"], [2, "VertexAttrib1sARB", "VertexAttrib1s", "loopback_VertexAttrib1sARB", "_mesa_VertexAttrib1s"], [2, "VertexAttrib1sNV", "VertexAttrib1sNV", "loopback_VertexAttrib1sNV", "_mesa_VertexAttrib1sNV"], [2, "VertexAttrib1svARB", "VertexAttrib1sv", "loopback_VertexAttrib1svARB", "_mesa_VertexAttrib1sv"], [2, "VertexAttrib1svNV", "VertexAttrib1svNV", "loopback_VertexAttrib1svNV", "_mesa_VertexAttrib1svNV"], [2, "VertexAttrib2dARB", "VertexAttrib2d", "loopback_VertexAttrib2dARB", "_mesa_VertexAttrib2d"], [2, "VertexAttrib2dNV", "VertexAttrib2dNV", "loopback_VertexAttrib2dNV", "_mesa_VertexAttrib2dNV"], [2, "VertexAttrib2dvARB", "VertexAttrib2dv", "loopback_VertexAttrib2dvARB", "_mesa_VertexAttrib2dv"], [2, "VertexAttrib2dvNV", "VertexAttrib2dvNV", "loopback_VertexAttrib2dvNV", "_mesa_VertexAttrib2dvNV"], [2, "VertexAttrib2sARB", "VertexAttrib2s", "loopback_VertexAttrib2sARB", "_mesa_VertexAttrib2s"], [2, "VertexAttrib2sNV", "VertexAttrib2sNV", "loopback_VertexAttrib2sNV", "_mesa_VertexAttrib2sNV"], [2, "VertexAttrib2svARB", "VertexAttrib2sv", "loopback_VertexAttrib2svARB", "_mesa_VertexAttrib2sv"], [2, "VertexAttrib2svNV", "VertexAttrib2svNV", "loopback_VertexAttrib2svNV", "_mesa_VertexAttrib2svNV"], [2, "VertexAttrib3dARB", "VertexAttrib3d", "loopback_VertexAttrib3dARB", "_mesa_VertexAttrib3d"], [2, "VertexAttrib3dNV", "VertexAttrib3dNV", "loopback_VertexAttrib3dNV", "_mesa_VertexAttrib3dNV"], [2, "VertexAttrib3dvARB", "VertexAttrib3dv", "loopback_VertexAttrib3dvARB", "_mesa_VertexAttrib3dv"], [2, "VertexAttrib3dvNV", "VertexAttrib3dvNV", "loopback_VertexAttrib3dvNV", "_mesa_VertexAttrib3dvNV"], [2, "VertexAttrib3sARB", "VertexAttrib3s", "loopback_VertexAttrib3sARB", "_mesa_VertexAttrib3s"], [2, "VertexAttrib3sNV", "VertexAttrib3sNV", "loopback_VertexAttrib3sNV", "_mesa_VertexAttrib3sNV"], [2, "VertexAttrib3svARB", "VertexAttrib3sv", "loopback_VertexAttrib3svARB", "_mesa_VertexAttrib3sv"], [2, "VertexAttrib3svNV", "VertexAttrib3svNV", "loopback_VertexAttrib3svNV", "_mesa_VertexAttrib3svNV"], [2, "VertexAttrib4NbvARB", "VertexAttrib4Nbv", "loopback_VertexAttrib4NbvARB", "_mesa_VertexAttrib4Nbv"], [2, "VertexAttrib4NivARB", "VertexAttrib4Niv", "loopback_VertexAttrib4NivARB", "_mesa_VertexAttrib4Niv"], [2, "VertexAttrib4NsvARB", "VertexAttrib4Nsv", "loopback_VertexAttrib4NsvARB", "_mesa_VertexAttrib4Nsv"], [2, "VertexAttrib4NubARB", "VertexAttrib4Nub", "loopback_VertexAttrib4NubARB", "_mesa_VertexAttrib4Nub"], [2, "VertexAttrib4NubvARB", "VertexAttrib4Nubv", "loopback_VertexAttrib4NubvARB", "_mesa_VertexAttrib4Nubv"], [2, "VertexAttrib4NuivARB", "VertexAttrib4Nuiv", "loopback_VertexAttrib4NuivARB", "_mesa_VertexAttrib4Nuiv"], [2, "VertexAttrib4NusvARB", "VertexAttrib4Nusv", "loopback_VertexAttrib4NusvARB", "_mesa_VertexAttrib4Nusv"], [2, "VertexAttrib4bvARB", "VertexAttrib4bv", "loopback_VertexAttrib4bvARB", "_mesa_VertexAttrib4bv"], [2, "VertexAttrib4dARB", "VertexAttrib4d", "loopback_VertexAttrib4dARB", "_mesa_VertexAttrib4d"], [2, "VertexAttrib4dNV", "VertexAttrib4dNV", "loopback_VertexAttrib4dNV", "_mesa_VertexAttrib4dNV"], [2, "VertexAttrib4dvARB", "VertexAttrib4dv", "loopback_VertexAttrib4dvARB", "_mesa_VertexAttrib4dv"], [2, "VertexAttrib4dvNV", "VertexAttrib4dvNV", "loopback_VertexAttrib4dvNV", "_mesa_VertexAttrib4dvNV"], [2, "VertexAttrib4ivARB", "VertexAttrib4iv", "loopback_VertexAttrib4ivARB", "_mesa_VertexAttrib4iv"], [2, "VertexAttrib4sARB", "VertexAttrib4s", "loopback_VertexAttrib4sARB", "_mesa_VertexAttrib4s"], [2, "VertexAttrib4sNV", "VertexAttrib4sNV", "loopback_VertexAttrib4sNV", "_mesa_VertexAttrib4sNV"], [2, "VertexAttrib4svARB", "VertexAttrib4sv", "loopback_VertexAttrib4svARB", "_mesa_VertexAttrib4sv"], [2, "VertexAttrib4svNV", "VertexAttrib4svNV", "loopback_VertexAttrib4svNV", "_mesa_VertexAttrib4svNV"], [2, "VertexAttrib4ubNV", "VertexAttrib4ubNV", "loopback_VertexAttrib4ubNV", "_mesa_VertexAttrib4ubNV"], [2, "VertexAttrib4ubvARB", "VertexAttrib4ubv", "loopback_VertexAttrib4ubvARB", "_mesa_VertexAttrib4ubv"], [2, "VertexAttrib4ubvNV", "VertexAttrib4ubvNV", "loopback_VertexAttrib4ubvNV", "_mesa_VertexAttrib4ubvNV"], [2, "VertexAttrib4uivARB", "VertexAttrib4uiv", "loopback_VertexAttrib4uivARB", "_mesa_VertexAttrib4uiv"], [2, "VertexAttrib4usvARB", "VertexAttrib4usv", "loopback_VertexAttrib4usvARB", "_mesa_VertexAttrib4usv"], [2, "VertexAttribI1ivEXT", "VertexAttribI1iv", "loopback_VertexAttribI1iv", "_mesa_VertexAttribI1iv"], [2, "VertexAttribI1uivEXT", "VertexAttribI1uiv", "loopback_VertexAttribI1uiv", "_mesa_VertexAttribI1uiv"], [2, "VertexAttribI4bvEXT", "VertexAttribI4bv", "loopback_VertexAttribI4bv", "_mesa_VertexAttribI4bv"], [2, "VertexAttribI4svEXT", "VertexAttribI4sv", "loopback_VertexAttribI4sv", "_mesa_VertexAttribI4sv"], [2, "VertexAttribI4ubvEXT", "VertexAttribI4ubv", "loopback_VertexAttribI4ubv", "_mesa_VertexAttribI4ubv"], [2, "VertexAttribI4usvEXT", "VertexAttribI4usv", "loopback_VertexAttribI4usv", "_mesa_VertexAttribI4usv"], [2, "VertexAttribs1dvNV", "VertexAttribs1dvNV", "loopback_VertexAttribs1dvNV", "_mesa_VertexAttribs1dvNV"], [2, "VertexAttribs1fvNV", "VertexAttribs1fvNV", "loopback_VertexAttribs1fvNV", "_mesa_VertexAttribs1fvNV"], [2, "VertexAttribs1svNV", "VertexAttribs1svNV", "loopback_VertexAttribs1svNV", "_mesa_VertexAttribs1svNV"], [2, "VertexAttribs2dvNV", "VertexAttribs2dvNV", "loopback_VertexAttribs2dvNV", "_mesa_VertexAttribs2dvNV"], [2, "VertexAttribs2fvNV", "VertexAttribs2fvNV", "loopback_VertexAttribs2fvNV", "_mesa_VertexAttribs2fvNV"], [2, "VertexAttribs2svNV", "VertexAttribs2svNV", "loopback_VertexAttribs2svNV", "_mesa_VertexAttribs2svNV"], [2, "VertexAttribs3dvNV", "VertexAttribs3dvNV", "loopback_VertexAttribs3dvNV", "_mesa_VertexAttribs3dvNV"], [2, "VertexAttribs3fvNV", "VertexAttribs3fvNV", "loopback_VertexAttribs3fvNV", "_mesa_VertexAttribs3fvNV"], [2, "VertexAttribs3svNV", "VertexAttribs3svNV", "loopback_VertexAttribs3svNV", "_mesa_VertexAttribs3svNV"], [2, "VertexAttribs4dvNV", "VertexAttribs4dvNV", "loopback_VertexAttribs4dvNV", "_mesa_VertexAttribs4dvNV"], [2, "VertexAttribs4fvNV", "VertexAttribs4fvNV", "loopback_VertexAttribs4fvNV", "_mesa_VertexAttribs4fvNV"], [2, "VertexAttribs4svNV", "VertexAttribs4svNV", "loopback_VertexAttribs4svNV", "_mesa_VertexAttribs4svNV"], [2, "VertexAttribs4ubvNV", "VertexAttribs4ubvNV", "loopback_VertexAttribs4ubvNV", "_mesa_VertexAttribs4ubvNV"], [3, "ActiveTextureARB", "ActiveTexture", "_mesa_ActiveTextureARB", "_mesa_ActiveTexture"], [3, "BeginConditionalRenderNV", "BeginConditionalRender", "_mesa_BeginConditionalRender", "_mesa_BeginConditionalRender"], [3, "BeginQueryARB", "BeginQuery", "_mesa_BeginQueryARB", "_mesa_BeginQuery"], [3, "BeginTransformFeedbackEXT", "BeginTransformFeedback", "_mesa_BeginTransformFeedback", "_mesa_BeginTransformFeedback"], [3, "BindAttribLocationARB", "BindAttribLocation", "_mesa_BindAttribLocationARB", "_mesa_BindAttribLocation"], [3, "BindBufferARB", "BindBuffer", "_mesa_BindBufferARB", "_mesa_BindBuffer"], [3, "BindBufferBaseEXT", "BindBufferBase", "_mesa_BindBufferBase", "_mesa_BindBufferBase"], [3, "BindBufferRangeEXT", "BindBufferRange", "_mesa_BindBufferRange", "_mesa_BindBufferRange"], [3, "BindFragDataLocationEXT", "BindFragDataLocation", "_mesa_BindFragDataLocation", "_mesa_BindFragDataLocation"], [3, "BindFramebufferEXT", "BindFramebuffer", "_mesa_BindFramebufferEXT", "_mesa_BindFramebuffer"], [3, "BindProgramNV", "BindProgramARB", "_mesa_BindProgram", "_mesa_BindProgramARB"], [3, "BindRenderbufferEXT", "BindRenderbuffer", "_mesa_BindRenderbufferEXT", "_mesa_BindRenderbuffer"], [3, "BlendEquationSeparateEXT", "BlendEquationSeparate", "_mesa_BlendEquationSeparateEXT", "_mesa_BlendEquationSeparate"], [3, "BlendEquationSeparateiARB", "BlendEquationSeparateiARB", "_mesa_BlendEquationSeparatei", "_mesa_BlendEquationSeparateiARB"], [3, "BlendEquationiARB", "BlendEquationiARB", "_mesa_BlendEquationi", "_mesa_BlendEquationiARB"], [3, "BlendFuncSeparateEXT", "BlendFuncSeparate", "_mesa_BlendFuncSeparateEXT", "_mesa_BlendFuncSeparate"], [3, "BlendFuncSeparateiARB", "BlendFuncSeparateiARB", "_mesa_BlendFuncSeparatei", "_mesa_BlendFuncSeparateiARB"], [3, "BlendFunciARB", "BlendFunciARB", "_mesa_BlendFunci", "_mesa_BlendFunciARB"], [3, "BlitFramebufferEXT", "BlitFramebuffer", "_mesa_BlitFramebufferEXT", "_mesa_BlitFramebuffer"], [3, "BufferDataARB", "BufferData", "_mesa_BufferDataARB", "_mesa_BufferData"], [3, "BufferSubDataARB", "BufferSubData", "_mesa_BufferSubDataARB", "_mesa_BufferSubData"], [3, "CheckFramebufferStatusEXT", "CheckFramebufferStatus", "_mesa_CheckFramebufferStatusEXT", "_mesa_CheckFramebufferStatus"], [3, "ClampColorARB", "ClampColor", "_mesa_ClampColorARB", "_mesa_ClampColor"], [3, "ClientActiveTextureARB", "ClientActiveTexture", "_mesa_ClientActiveTextureARB", "_mesa_ClientActiveTexture"], [3, "ColorMaskIndexedEXT", "ColorMaski", "_mesa_ColorMaskIndexed", "_mesa_ColorMaski"], [3, "CompileShaderARB", "CompileShader", "_mesa_CompileShaderARB", "_mesa_CompileShader"], [3, "CompressedTexImage1DARB", "CompressedTexImage1D", "_mesa_CompressedTexImage1DARB", "_mesa_CompressedTexImage1D"], [3, "CompressedTexImage2DARB", "CompressedTexImage2D", "_mesa_CompressedTexImage2DARB", "_mesa_CompressedTexImage2D"], [3, "CompressedTexImage3DARB", "CompressedTexImage3D", "_mesa_CompressedTexImage3DARB", "_mesa_CompressedTexImage3D"], [3, "CompressedTexSubImage1DARB", "CompressedTexSubImage1D", "_mesa_CompressedTexSubImage1DARB", "_mesa_CompressedTexSubImage1D"], [3, "CompressedTexSubImage2DARB", "CompressedTexSubImage2D", "_mesa_CompressedTexSubImage2DARB", "_mesa_CompressedTexSubImage2D"], [3, "CompressedTexSubImage3DARB", "CompressedTexSubImage3D", "_mesa_CompressedTexSubImage3DARB", "_mesa_CompressedTexSubImage3D"], [3, "DeleteBuffersARB", "DeleteBuffers", "_mesa_DeleteBuffersARB", "_mesa_DeleteBuffers"], [3, "DeleteFramebuffersEXT", "DeleteFramebuffers", "_mesa_DeleteFramebuffersEXT", "_mesa_DeleteFramebuffers"], [3, "DeleteProgramsNV", "DeleteProgramsARB", "_mesa_DeletePrograms", "_mesa_DeleteProgramsARB"], [3, "DeleteQueriesARB", "DeleteQueries", "_mesa_DeleteQueriesARB", "_mesa_DeleteQueries"], [3, "DeleteRenderbuffersEXT", "DeleteRenderbuffers", "_mesa_DeleteRenderbuffersEXT", "_mesa_DeleteRenderbuffers"], [3, "DeleteVertexArraysAPPLE", "DeleteVertexArrays", "_mesa_DeleteVertexArraysAPPLE", "_mesa_DeleteVertexArrays"], [3, "DisableIndexedEXT", "Disablei", "_mesa_DisableIndexed", "_mesa_Disablei"], [3, "DisableVertexAttribArrayARB", "DisableVertexAttribArray", "_mesa_DisableVertexAttribArrayARB", "_mesa_DisableVertexAttribArray"], [3, "DrawBuffersARB", "DrawBuffers", "_mesa_DrawBuffersARB", "_mesa_DrawBuffers"], [3, "DrawTexfOES", "DrawTexfOES", "_mesa_DrawTexf", "_mesa_DrawTexfOES"], [3, "DrawTexfvOES", "DrawTexfvOES", "_mesa_DrawTexfv", "_mesa_DrawTexfvOES"], [3, "DrawTexiOES", "DrawTexiOES", "_mesa_DrawTexi", "_mesa_DrawTexiOES"], [3, "DrawTexivOES", "DrawTexivOES", "_mesa_DrawTexiv", "_mesa_DrawTexivOES"], [3, "DrawTexsOES", "DrawTexsOES", "_mesa_DrawTexs", "_mesa_DrawTexsOES"], [3, "DrawTexsvOES", "DrawTexsvOES", "_mesa_DrawTexsv", "_mesa_DrawTexsvOES"], [3, "EnableIndexedEXT", "Enablei", "_mesa_EnableIndexed", "_mesa_Enablei"], [3, "EnableVertexAttribArrayARB", "EnableVertexAttribArray", "_mesa_EnableVertexAttribArrayARB", "_mesa_EnableVertexAttribArray"], [3, "EndConditionalRenderNV", "EndConditionalRender", "_mesa_EndConditionalRender", "_mesa_EndConditionalRender"], [3, "EndQueryARB", "EndQuery", "_mesa_EndQueryARB", "_mesa_EndQuery"], [3, "EndTransformFeedbackEXT", "EndTransformFeedback", "_mesa_EndTransformFeedback", "_mesa_EndTransformFeedback"], [3, "FogCoordPointerEXT", "FogCoordPointer", "_mesa_FogCoordPointerEXT", "_mesa_FogCoordPointer"], [3, "FramebufferRenderbufferEXT", "FramebufferRenderbuffer", "_mesa_FramebufferRenderbufferEXT", "_mesa_FramebufferRenderbuffer"], [3, "FramebufferTexture1DEXT", "FramebufferTexture1D", "_mesa_FramebufferTexture1DEXT", "_mesa_FramebufferTexture1D"], [3, "FramebufferTexture2DEXT", "FramebufferTexture2D", "_mesa_FramebufferTexture2DEXT", "_mesa_FramebufferTexture2D"], [3, "FramebufferTexture3DEXT", "FramebufferTexture3D", "_mesa_FramebufferTexture3DEXT", "_mesa_FramebufferTexture3D"], [3, "FramebufferTextureLayerEXT", "FramebufferTextureLayer", "_mesa_FramebufferTextureLayerEXT", "_mesa_FramebufferTextureLayer"], [3, "GenBuffersARB", "GenBuffers", "_mesa_GenBuffersARB", "_mesa_GenBuffers"], [3, "GenFramebuffersEXT", "GenFramebuffers", "_mesa_GenFramebuffersEXT", "_mesa_GenFramebuffers"], [3, "GenProgramsNV", "GenProgramsARB", "_mesa_GenPrograms", "_mesa_GenProgramsARB"], [3, "GenQueriesARB", "GenQueries", "_mesa_GenQueriesARB", "_mesa_GenQueries"], [3, "GenRenderbuffersEXT", "GenRenderbuffers", "_mesa_GenRenderbuffersEXT", "_mesa_GenRenderbuffers"], [3, "GenerateMipmapEXT", "GenerateMipmap", "_mesa_GenerateMipmapEXT", "_mesa_GenerateMipmap"], [3, "GetActiveAttribARB", "GetActiveAttrib", "_mesa_GetActiveAttribARB", "_mesa_GetActiveAttrib"], [3, "GetActiveUniformARB", "GetActiveUniform", "_mesa_GetActiveUniformARB", "_mesa_GetActiveUniform"], [3, "GetAttribLocationARB", "GetAttribLocation", "_mesa_GetAttribLocationARB", "_mesa_GetAttribLocation"], [3, "GetBooleanIndexedvEXT", "GetBooleani_v", "_mesa_GetBooleanIndexedv", "_mesa_GetBooleani_v"], [3, "GetBufferParameterivARB", "GetBufferParameteriv", "_mesa_GetBufferParameterivARB", "_mesa_GetBufferParameteriv"], [3, "GetBufferPointervARB", "GetBufferPointerv", "_mesa_GetBufferPointervARB", "_mesa_GetBufferPointerv"], [3, "GetBufferSubDataARB", "GetBufferSubData", "_mesa_GetBufferSubDataARB", "_mesa_GetBufferSubData"], [3, "GetCompressedTexImageARB", "GetCompressedTexImage", "_mesa_GetCompressedTexImageARB", "_mesa_GetCompressedTexImage"], [3, "GetFixedvOES", "GetFixedv", "_mesa_GetFixedv", "_mesa_GetFixedv"], [3, "GetFragDataLocationEXT", "GetFragDataLocation", "_mesa_GetFragDataLocation", "_mesa_GetFragDataLocation"], [3, "GetFramebufferAttachmentParameterivEXT", "GetFramebufferAttachmentParameteriv", "_mesa_GetFramebufferAttachmentParameterivEXT", "_mesa_GetFramebufferAttachmentParameteriv"], [3, "GetIntegerIndexedvEXT", "GetIntegeri_v", "_mesa_GetIntegerIndexedv", "_mesa_GetIntegeri_v"], [3, "GetQueryObjecti64vEXT", "GetQueryObjecti64v", "_mesa_GetQueryObjecti64vEXT", "_mesa_GetQueryObjecti64v"], [3, "GetQueryObjectivARB", "GetQueryObjectiv", "_mesa_GetQueryObjectivARB", "_mesa_GetQueryObjectiv"], [3, "GetQueryObjectui64vEXT", "GetQueryObjectui64v", "_mesa_GetQueryObjectui64vEXT", "_mesa_GetQueryObjectui64v"], [3, "GetQueryObjectuivARB", "GetQueryObjectuiv", "_mesa_GetQueryObjectuivARB", "_mesa_GetQueryObjectuiv"], [3, "GetQueryivARB", "GetQueryiv", "_mesa_GetQueryivARB", "_mesa_GetQueryiv"], [3, "GetRenderbufferParameterivEXT", "GetRenderbufferParameteriv", "_mesa_GetRenderbufferParameterivEXT", "_mesa_GetRenderbufferParameteriv"], [3, "GetShaderSourceARB", "GetShaderSource", "_mesa_GetShaderSourceARB", "_mesa_GetShaderSource"], [3, "GetTexParameterIivEXT", "GetTexParameterIiv", "_mesa_GetTexParameterIiv", "_mesa_GetTexParameterIiv"], [3, "GetTexParameterIuivEXT", "GetTexParameterIuiv", "_mesa_GetTexParameterIuiv", "_mesa_GetTexParameterIuiv"], [3, "GetTransformFeedbackVaryingEXT", "GetTransformFeedbackVarying", "_mesa_GetTransformFeedbackVarying", "_mesa_GetTransformFeedbackVarying"], [3, "GetUniformLocationARB", "GetUniformLocation", "_mesa_GetUniformLocationARB", "_mesa_GetUniformLocation"], [3, "GetUniformfvARB", "GetUniformfv", "_mesa_GetUniformfvARB", "_mesa_GetUniformfv"], [3, "GetUniformivARB", "GetUniformiv", "_mesa_GetUniformivARB", "_mesa_GetUniformiv"], [3, "GetUniformuivEXT", "GetUniformuiv", "_mesa_GetUniformuiv", "_mesa_GetUniformuiv"], [3, "GetVertexAttribIivEXT", "GetVertexAttribIiv", "_mesa_GetVertexAttribIiv", "_mesa_GetVertexAttribIiv"], [3, "GetVertexAttribIuivEXT", "GetVertexAttribIuiv", "_mesa_GetVertexAttribIuiv", "_mesa_GetVertexAttribIuiv"], [3, "GetVertexAttribPointervNV", "GetVertexAttribPointerv", "_mesa_GetVertexAttribPointervARB", "_mesa_GetVertexAttribPointerv"], [3, "GetVertexAttribdvARB", "GetVertexAttribdv", "_mesa_GetVertexAttribdvARB", "_mesa_GetVertexAttribdv"], [3, "GetVertexAttribfvARB", "GetVertexAttribfv", "_mesa_GetVertexAttribfvARB", "_mesa_GetVertexAttribfv"], [3, "GetVertexAttribivARB", "GetVertexAttribiv", "_mesa_GetVertexAttribivARB", "_mesa_GetVertexAttribiv"], [3, "IsBufferARB", "IsBuffer", "_mesa_IsBufferARB", "_mesa_IsBuffer"], [3, "IsEnabledIndexedEXT", "IsEnabledi", "_mesa_IsEnabledIndexed", "_mesa_IsEnabledi"], [3, "IsFramebufferEXT", "IsFramebuffer", "_mesa_IsFramebufferEXT", "_mesa_IsFramebuffer"], [3, "IsProgramNV", "IsProgramARB", "_mesa_IsProgramARB", "_mesa_IsProgramARB"], [3, "IsQueryARB", "IsQuery", "_mesa_IsQueryARB", "_mesa_IsQuery"], [3, "IsRenderbufferEXT", "IsRenderbuffer", "_mesa_IsRenderbufferEXT", "_mesa_IsRenderbuffer"], [3, "IsVertexArrayAPPLE", "IsVertexArray", "_mesa_IsVertexArrayAPPLE", "_mesa_IsVertexArray"], [3, "LinkProgramARB", "LinkProgram", "_mesa_LinkProgramARB", "_mesa_LinkProgram"], [3, "LoadTransposeMatrixdARB", "LoadTransposeMatrixd", "_mesa_LoadTransposeMatrixdARB", "_mesa_LoadTransposeMatrixd"], [3, "LoadTransposeMatrixfARB", "LoadTransposeMatrixf", "_mesa_LoadTransposeMatrixfARB", "_mesa_LoadTransposeMatrixf"], [3, "MapBufferARB", "MapBuffer", "_mesa_MapBufferARB", "_mesa_MapBuffer"], [3, "MultTransposeMatrixdARB", "MultTransposeMatrixd", "_mesa_MultTransposeMatrixdARB", "_mesa_MultTransposeMatrixd"], [3, "MultTransposeMatrixfARB", "MultTransposeMatrixf", "_mesa_MultTransposeMatrixfARB", "_mesa_MultTransposeMatrixf"], [3, "MultiDrawArraysEXT", "MultiDrawArrays", "_mesa_MultiDrawArraysEXT", "_mesa_MultiDrawArrays"], [3, "PointParameterfEXT", "PointParameterf", "_mesa_PointParameterf", "_mesa_PointParameterf"], [3, "PointParameterfvEXT", "PointParameterfv", "_mesa_PointParameterfv", "_mesa_PointParameterfv"], [3, "PointParameteriNV", "PointParameteri", "_mesa_PointParameteri", "_mesa_PointParameteri"], [3, "PointParameterivNV", "PointParameteriv", "_mesa_PointParameteriv", "_mesa_PointParameteriv"], [3, "PointSizePointerOES", "PointSizePointerOES", "_mesa_PointSizePointer", "_mesa_PointSizePointerOES"], [3, "PrimitiveRestartIndexNV", "PrimitiveRestartIndex", "_mesa_PrimitiveRestartIndex", "_mesa_PrimitiveRestartIndex"], [3, "ProvokingVertexEXT", "ProvokingVertex", "_mesa_ProvokingVertexEXT", "_mesa_ProvokingVertex"], [3, "RenderbufferStorageEXT", "RenderbufferStorage", "_mesa_RenderbufferStorageEXT", "_mesa_RenderbufferStorage"], [3, "SampleCoverageARB", "SampleCoverage", "_mesa_SampleCoverageARB", "_mesa_SampleCoverage"], [3, "SecondaryColorPointerEXT", "SecondaryColorPointer", "_mesa_SecondaryColorPointerEXT", "_mesa_SecondaryColorPointer"], [3, "ShaderSourceARB", "ShaderSource", "_mesa_ShaderSourceARB", "_mesa_ShaderSource"], [3, "TexBufferARB", "TexBuffer", "_mesa_TexBuffer", "_mesa_TexBuffer"], [3, "TexParameterIivEXT", "TexParameterIiv", "_mesa_TexParameterIiv", "_mesa_TexParameterIiv"], [3, "TexParameterIuivEXT", "TexParameterIuiv", "_mesa_TexParameterIuiv", "_mesa_TexParameterIuiv"], [3, "TransformFeedbackVaryingsEXT", "TransformFeedbackVaryings", "_mesa_TransformFeedbackVaryings", "_mesa_TransformFeedbackVaryings"], [3, "Uniform1fARB", "Uniform1f", "_mesa_Uniform1fARB", "_mesa_Uniform1f"], [3, "Uniform1fvARB", "Uniform1fv", "_mesa_Uniform1fvARB", "_mesa_Uniform1fv"], [3, "Uniform1iARB", "Uniform1i", "_mesa_Uniform1iARB", "_mesa_Uniform1i"], [3, "Uniform1ivARB", "Uniform1iv", "_mesa_Uniform1ivARB", "_mesa_Uniform1iv"], [3, "Uniform1uiEXT", "Uniform1ui", "_mesa_Uniform1ui", "_mesa_Uniform1ui"], [3, "Uniform1uivEXT", "Uniform1uiv", "_mesa_Uniform1uiv", "_mesa_Uniform1uiv"], [3, "Uniform2fARB", "Uniform2f", "_mesa_Uniform2fARB", "_mesa_Uniform2f"], [3, "Uniform2fvARB", "Uniform2fv", "_mesa_Uniform2fvARB", "_mesa_Uniform2fv"], [3, "Uniform2iARB", "Uniform2i", "_mesa_Uniform2iARB", "_mesa_Uniform2i"], [3, "Uniform2ivARB", "Uniform2iv", "_mesa_Uniform2ivARB", "_mesa_Uniform2iv"], [3, "Uniform2uiEXT", "Uniform2ui", "_mesa_Uniform2ui", "_mesa_Uniform2ui"], [3, "Uniform2uivEXT", "Uniform2uiv", "_mesa_Uniform2uiv", "_mesa_Uniform2uiv"], [3, "Uniform3fARB", "Uniform3f", "_mesa_Uniform3fARB", "_mesa_Uniform3f"], [3, "Uniform3fvARB", "Uniform3fv", "_mesa_Uniform3fvARB", "_mesa_Uniform3fv"], [3, "Uniform3iARB", "Uniform3i", "_mesa_Uniform3iARB", "_mesa_Uniform3i"], [3, "Uniform3ivARB", "Uniform3iv", "_mesa_Uniform3ivARB", "_mesa_Uniform3iv"], [3, "Uniform3uiEXT", "Uniform3ui", "_mesa_Uniform3ui", "_mesa_Uniform3ui"], [3, "Uniform3uivEXT", "Uniform3uiv", "_mesa_Uniform3uiv", "_mesa_Uniform3uiv"], [3, "Uniform4fARB", "Uniform4f", "_mesa_Uniform4fARB", "_mesa_Uniform4f"], [3, "Uniform4fvARB", "Uniform4fv", "_mesa_Uniform4fvARB", "_mesa_Uniform4fv"], [3, "Uniform4iARB", "Uniform4i", "_mesa_Uniform4iARB", "_mesa_Uniform4i"], [3, "Uniform4ivARB", "Uniform4iv", "_mesa_Uniform4ivARB", "_mesa_Uniform4iv"], [3, "Uniform4uiEXT", "Uniform4ui", "_mesa_Uniform4ui", "_mesa_Uniform4ui"], [3, "Uniform4uivEXT", "Uniform4uiv", "_mesa_Uniform4uiv", "_mesa_Uniform4uiv"], [3, "UniformMatrix2fvARB", "UniformMatrix2fv", "_mesa_UniformMatrix2fvARB", "_mesa_UniformMatrix2fv"], [3, "UniformMatrix3fvARB", "UniformMatrix3fv", "_mesa_UniformMatrix3fvARB", "_mesa_UniformMatrix3fv"], [3, "UniformMatrix4fvARB", "UniformMatrix4fv", "_mesa_UniformMatrix4fvARB", "_mesa_UniformMatrix4fv"], [3, "UnmapBufferARB", "UnmapBuffer", "_mesa_UnmapBufferARB", "_mesa_UnmapBuffer"], [3, "UseProgramObjectARB", "UseProgram", "_mesa_UseProgramObjectARB", "_mesa_UseProgram"], [3, "ValidateProgramARB", "ValidateProgram", "_mesa_ValidateProgramARB", "_mesa_ValidateProgram"], [3, "VertexAttribDivisorARB", "VertexAttribDivisor", "_mesa_VertexAttribDivisor", "_mesa_VertexAttribDivisor"], [3, "VertexAttribIPointerEXT", "VertexAttribIPointer", "_mesa_VertexAttribIPointer", "_mesa_VertexAttribIPointer"], [3, "VertexAttribPointerARB", "VertexAttribPointer", "_mesa_VertexAttribPointerARB", "_mesa_VertexAttribPointer"], [3, "WindowPos2dMESA", "WindowPos2d", "_mesa_WindowPos2dMESA", "_mesa_WindowPos2d"], [3, "WindowPos2dvMESA", "WindowPos2dv", "_mesa_WindowPos2dvMESA", "_mesa_WindowPos2dv"], [3, "WindowPos2fMESA", "WindowPos2f", "_mesa_WindowPos2fMESA", "_mesa_WindowPos2f"], [3, "WindowPos2fvMESA", "WindowPos2fv", "_mesa_WindowPos2fvMESA", "_mesa_WindowPos2fv"], [3, "WindowPos2iMESA", "WindowPos2i", "_mesa_WindowPos2iMESA", "_mesa_WindowPos2i"], [3, "WindowPos2ivMESA", "WindowPos2iv", "_mesa_WindowPos2ivMESA", "_mesa_WindowPos2iv"], [3, "WindowPos2sMESA", "WindowPos2s", "_mesa_WindowPos2sMESA", "_mesa_WindowPos2s"], [3, "WindowPos2svMESA", "WindowPos2sv", "_mesa_WindowPos2svMESA", "_mesa_WindowPos2sv"], [3, "WindowPos3dMESA", "WindowPos3d", "_mesa_WindowPos3dMESA", "_mesa_WindowPos3d"], [3, "WindowPos3dvMESA", "WindowPos3dv", "_mesa_WindowPos3dvMESA", "_mesa_WindowPos3dv"], [3, "WindowPos3fMESA", "WindowPos3f", "_mesa_WindowPos3fMESA", "_mesa_WindowPos3f"], [3, "WindowPos3fvMESA", "WindowPos3fv", "_mesa_WindowPos3fvMESA", "_mesa_WindowPos3fv"], [3, "WindowPos3iMESA", "WindowPos3i", "_mesa_WindowPos3iMESA", "_mesa_WindowPos3i"], [3, "WindowPos3ivMESA", "WindowPos3iv", "_mesa_WindowPos3ivMESA", "_mesa_WindowPos3iv"], [3, "WindowPos3sMESA", "WindowPos3s", "_mesa_WindowPos3sMESA", "_mesa_WindowPos3s"], [3, "WindowPos3svMESA", "WindowPos3sv", "_mesa_WindowPos3svMESA", "_mesa_WindowPos3sv"]]

main(renames)
