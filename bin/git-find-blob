#!/usr/bin/perl
# From Aristotle Pagaltzis (http://stackoverflow.com/questions/223678/which-commit-has-this-blob)
use 5.008;
use strict;
use Memoize;

die "usage: git-find-blob <blob> [<git-log arguments ...>]\n"
    if not @ARGV;

my $blob_arg = shift;
open my $rev_parse, '-|', git => 'rev-parse' => '--verify', $blob_arg or die "Couldn't open pipe to git-rev-parse: $!\n"; 

my $obj_name = <$rev_parse>; 
chomp $obj_name; 
close $rev_parse or die "Couldn't expand passed blob.\n"; 
$obj_name eq $blob_arg or print "(full blob is $obj_name)\n";

sub check_tree {
    my ( $tree ) = @_;
    my @subtree;

    {
        open my $ls_tree, '-|', git => 'ls-tree' => $tree
            or die "Couldn't open pipe to git-ls-tree: $!\n";

        while ( <$ls_tree> ) {
            /\A[0-7]{6} (\S+) (\S+)/
                or die "unexpected git-ls-tree output";
            return 1 if $2 eq $obj_name;
            push @subtree, $2 if $1 eq 'tree';
        }
    }

    check_tree( $_ ) && return 1 for @subtree;

    return;
}

memoize 'check_tree';

open my $log, '-|', git => log => @ARGV, '--pretty=format:%T %h %s'
    or die "Couldn't open pipe to git-log: $!\n";

while ( <$log> ) {
    chomp;
    my ( $tree, $commit, $subject ) = split " ", $_, 3;
    print "$commit $subject\n" if check_tree( $tree );
}